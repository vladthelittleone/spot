/**
 * –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 */

const Stage = require("telegraf/stage");
const WizardScene = require("telegraf/scenes/wizard");
const Components = require("./components");
const Markup = require("telegraf/markup");
const SpotModel = require("../models/spot");
const {SPOT_TYPES} = require('./types');
const session = require("telegraf/session");
const lodash = require("lodash");
const message = require("./message");
const moment = require("moment");

const spots = {};

module.exports = (bot) => {

  // –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞.
  const create = createScene();

  // Create scene manager
  const stage = new Stage();

  // Scene registration
  stage.register(create);

  bot.use(session());
  bot.use(stage.middleware());

  bot.hears(message.REMOVE_ACTIVE_SPOT, async (ctx) => {
    const {from} = ctx;

    const spot = await SpotModel.getCurrentSpot(from.id);
    if (!spot) {
      ctx.reply(message.NO_ACTIVE_SPOT);
      return;
    }
    if (spot.fromId === from.id && spot.players.length === 1) {
      await SpotModel.removeSpot(spot.hash);
      ctx.reply(message.MATCH_REMOVE_SUCCESS);
      bot.telegram.sendMessage(spot.groupId, "–¢–µ–∫—É—â–∏–π –º–∞—Ç—á –±—ã–ª —É–¥–∞–ª–µ–Ω");
      return;
    }

    const updated = await SpotModel.removePlayer(spot.hash, from);

    ctx.reply(message.PLAYER_REMOVE_SUCCESS);

    if (updated.fromId === from.id) {
      const randomPlayer = updated.players[0];
      await SpotModel.updateSpotFromId(updated.fromId, randomPlayer.id);
    }

    let str = '';
    str += `${from.first_name} ${from.last_name} –≤—ã—à–µ–ª –∏–∑ –º–∞—Ç—á–∞.\n`;
    str += `üëé ${updated.players.length} / ${updated.count}`;

    bot.telegram.sendMessage(updated.groupId, str);
  });

  bot.hears(message.OPEN_SPOTS, (ctx) => {
    SpotModel.getOpenSpots().then((spots) => {
      if (!spots.length) {
        ctx.reply(message.NO_ACTIVE_SPOTS);
      }
      for (const spot of spots) {
        Components.sendMatch(ctx, spot);
      }
    });
  });

  bot.hears(message.CREATE_SPOT, async (ctx) => {
    const spot = await SpotModel.getByFromId(ctx.from.id);
    if (!spot) {
      ctx.scene.enter("create");
    } else {
      ctx.reply(message.SPOT_ALREADY_CREATED);
      Components.sendMatch(ctx, spot);
    }
  });

  bot.hears(message.CURRENT_SPOT, async (ctx) => {
    const {from} = ctx;
    const spot = await SpotModel.getCurrentSpot(from.id);
    if (spot) {
      Components.sendMatch(ctx, spot);
    } else {
      ctx.reply(message.NO_ACTIVE_SPOT);
    }
  });
};

function createScene () {

  return new WizardScene(
    "create",

    /**
     * –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–∞—Ç—á–∞.
     */
    (ctx) => {
      const fromId = ctx.from.id;
      spots[ctx.from.id] = {fromId}; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π spot
      Components.chooseSpotType(ctx, SPOT_TYPES);
      return ctx.wizard.next();
    },

    /**
     * –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Ç—á–∞.
     */
    (ctx) => {
      const replyError = (ctx) => {
        ctx.reply(message.USER_ERROR_MSG);
        Components.chooseSpotType(ctx, SPOT_TYPES);
      };

      const type = ctx.callbackQuery && ctx.callbackQuery.data;
      if (type && lodash.includes(SPOT_TYPES, type)) {
        spots[ctx.from.id].spotType = ctx.callbackQuery.data;
        ctx.replyWithMarkdown(message.INSERT_SPOT_DATE);
        return ctx.wizard.next();
      } else {
        replyError(ctx);
      }
    },

    /**
     * –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Ç—á–∞.
     */
    (ctx) => {
      const time = moment(ctx.message.text, "DD.MM.YY H:m").toISOString();
      if (time) {
        if (moment(time, moment.ISO_8601).diff(moment(), "hours") < 0) {
          ctx.reply(message.CANNOT_USE_PAST_TIME);
        } else {
          spots[ctx.from.id].spotTime = time;
          ctx.replyWithMarkdown(message.INSERT_SPOT_LOCATION);
          return ctx.wizard.next();
        }
      } else {
        ctx.replyWithMarkdown("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π: *–î–î.–ú–ú.–ì–ì –ß:m*");
      }
    },

    /**
     * –í–≤–æ–¥ —Ü–µ–Ω—ã –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞.
     */
    (ctx) => {
      if (ctx.message.location) {
        spots[ctx.from.id].location = ctx.message.location;
      } else {
        spots[ctx.from.id].locationText = ctx.message.text;
      }
      ctx.reply(message.INSERT_SPOT_COST);
      return ctx.wizard.next();
    },

    /**
     * –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫.
     */
    (ctx) => {
      const {text} = ctx.message;
      const cost = Number.parseInt(text, 10);
      if (!isNaN(cost)) {
        spots[ctx.from.id].price = ctx.message.text;
        ctx.reply(message.INSERT_SPOT_MEMBERS);
        return ctx.wizard.next();
      } else {
        ctx.reply(message.USER_ERROR_MSG);
      }
    },

    /**
     * –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ.
     */
    (ctx) => {
      const {text} = ctx.message;
      const count = Number.parseInt(text, 10);
      if (!isNaN(count)) {
        spots[ctx.from.id].count = count;
        ctx.reply(message.INSERT_SPOT_PAYMENT_INFO);
        return ctx.wizard.next();
      } else {
        ctx.reply(message.USER_ERROR_MSG);
      }
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞.
     */
    async (ctx) => {
      const {from} = ctx;
      const {id} = from;

      spots[id].hash = id ^ moment();
      spots[id].paymentInfo = ctx.message.text;

      try {
        await SpotModel.create(spots[id]);
        await SpotModel.addPlayer(spots[id].hash, from);
        ctx.reply(
          "–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ –º–∞—Ç—á–µ.",
          Markup.inlineKeyboard([
            Markup.urlButton(
              "–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
              `https://telegram.me/SpotBBot?startgroup=${spots[id].hash}`
            )
          ]).extra()
        );

        delete spots[id]; // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ "—Ç–∏–ø–∞ –∫—ç—à–∞".
        return ctx.scene.leave();
      } catch (e) {
        ctx.reply(message.USER_ERROR_MSG);
      }
    }
  );
}
